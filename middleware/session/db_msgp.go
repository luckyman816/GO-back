package session

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/gofiber/fiber/v2/internal/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *db) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "d":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "d")
				return
			}
			if cap(z.d) >= int(zb0002) {
				z.d = (z.d)[:zb0002]
			} else {
				z.d = make([]kv, zb0002)
			}
			for za0001 := range z.d {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "d", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "d", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "k":
						z.d[za0001].k, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "d", za0001, "k")
							return
						}
					case "v":
						z.d[za0001].v, err = dc.ReadIntf()
						if err != nil {
							err = msgp.WrapError(err, "d", za0001, "v")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "d", za0001)
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *db) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "d"
	err = en.Append(0x81, 0xa1, 0x64)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.d)))
	if err != nil {
		err = msgp.WrapError(err, "d")
		return
	}
	for za0001 := range z.d {
		// map header, size 2
		// write "k"
		err = en.Append(0x82, 0xa1, 0x6b)
		if err != nil {
			return
		}
		err = en.WriteString(z.d[za0001].k)
		if err != nil {
			err = msgp.WrapError(err, "d", za0001, "k")
			return
		}
		// write "v"
		err = en.Append(0xa1, 0x76)
		if err != nil {
			return
		}
		err = en.WriteIntf(z.d[za0001].v)
		if err != nil {
			err = msgp.WrapError(err, "d", za0001, "v")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *db) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "d"
	o = append(o, 0x81, 0xa1, 0x64)
	o = msgp.AppendArrayHeader(o, uint32(len(z.d)))
	for za0001 := range z.d {
		// map header, size 2
		// string "k"
		o = append(o, 0x82, 0xa1, 0x6b)
		o = msgp.AppendString(o, z.d[za0001].k)
		// string "v"
		o = append(o, 0xa1, 0x76)
		o, err = msgp.AppendIntf(o, z.d[za0001].v)
		if err != nil {
			err = msgp.WrapError(err, "d", za0001, "v")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *db) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "d":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "d")
				return
			}
			if cap(z.d) >= int(zb0002) {
				z.d = (z.d)[:zb0002]
			} else {
				z.d = make([]kv, zb0002)
			}
			for za0001 := range z.d {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "d", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "d", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "k":
						z.d[za0001].k, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "d", za0001, "k")
							return
						}
					case "v":
						z.d[za0001].v, bts, err = msgp.ReadIntfBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "d", za0001, "v")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "d", za0001)
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *db) Msgsize() (s int) {
	s = 1 + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.d {
		s += 1 + 2 + msgp.StringPrefixSize + len(z.d[za0001].k) + 2 + msgp.GuessSize(z.d[za0001].v)
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *kv) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "k":
			z.k, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "k")
				return
			}
		case "v":
			z.v, err = dc.ReadIntf()
			if err != nil {
				err = msgp.WrapError(err, "v")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z kv) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "k"
	err = en.Append(0x82, 0xa1, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteString(z.k)
	if err != nil {
		err = msgp.WrapError(err, "k")
		return
	}
	// write "v"
	err = en.Append(0xa1, 0x76)
	if err != nil {
		return
	}
	err = en.WriteIntf(z.v)
	if err != nil {
		err = msgp.WrapError(err, "v")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z kv) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "k"
	o = append(o, 0x82, 0xa1, 0x6b)
	o = msgp.AppendString(o, z.k)
	// string "v"
	o = append(o, 0xa1, 0x76)
	o, err = msgp.AppendIntf(o, z.v)
	if err != nil {
		err = msgp.WrapError(err, "v")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *kv) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "k":
			z.k, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "k")
				return
			}
		case "v":
			z.v, bts, err = msgp.ReadIntfBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "v")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z kv) Msgsize() (s int) {
	s = 1 + 2 + msgp.StringPrefixSize + len(z.k) + 2 + msgp.GuessSize(z.v)
	return
}
